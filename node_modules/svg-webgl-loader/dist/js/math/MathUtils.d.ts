import { Vector2 } from './Vector2';
declare const DEG2RAD: number;
declare const RAD2DEG: number;
declare function generateUUID(): string;
declare function clamp(value: any, min: any, max: any): number;
declare function euclideanModulo(n: any, m: any): number;
declare function mapLinear(x: any, a1: any, a2: any, b1: any, b2: any): any;
declare function inverseLerp(x: any, y: any, value: any): number;
declare function lerp(x: any, y: any, t: any): number;
declare function damp(x: any, y: any, lambda: any, dt: any): number;
declare function pingpong(x: any, length?: number): number;
declare function smoothstep(x: any, min: any, max: any): number;
declare function smootherstep(x: any, min: any, max: any): number;
declare function randInt(low: any, high: any): any;
declare function randFloat(low: any, high: any): any;
declare function randFloatSpread(range: any): number;
declare function seededRandom(s: any): number;
declare function degToRad(degrees: any): number;
declare function radToDeg(radians: any): number;
declare function isPowerOfTwo(value: any): boolean;
declare function ceilPowerOfTwo(value: any): number;
declare function floorPowerOfTwo(value: any): number;
declare function setQuaternionFromProperEuler(q: any, a: any, b: any, c: any, order: any): void;
declare function getIntersectPoint(p0: Vector2, p1: Vector2, p2: Vector2, p3: Vector2): Vector2;
declare function getNormal(p2: Vector2, p1: Vector2): Vector2;
declare function getTriangleArea(p0: Vector2, p1: Vector2, p2: Vector2): number;
export { DEG2RAD, RAD2DEG, generateUUID, clamp, euclideanModulo, mapLinear, inverseLerp, lerp, damp, pingpong, smoothstep, smootherstep, randInt, randFloat, randFloatSpread, seededRandom, degToRad, radToDeg, isPowerOfTwo, ceilPowerOfTwo, floorPowerOfTwo, setQuaternionFromProperEuler, getIntersectPoint, getNormal, getTriangleArea, };
